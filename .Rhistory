blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
source("hietala_theme.R")
source("hietala_theme.R")
source("hietala_theme.R")
source("hietala_theme.R")
pnorm(q = 1.96, mean = 0, sd = 1, lower.tail = TRUE)
pnorm(q = 1.96, mean = 0, sd = 1, lower.tail = FALSE)
qnorm(p = 0.025, mean = 0, sd = 1, lower.tail = TRUE)
t.test(x = iris$Sepal.Length,
alternative = "greater",
mu = 5,
conf.level = 0.95)
t.test(x = iris$Sepal.Length,
alternative = "less",
conf.level = 0.95)
TreatmentPlantGrowth <- PlantGrowth %>% filter(group != "ctrl")
require(ggplot2)
require(grid)
require(gridExtra)
require(RColorBrewer)
require(dplyr)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
knitr::opts_chunk$set(echo = FALSE)
history <- read_xlsx("F:/OneDrive/OneDrive - Linköpings universitet/Jobb/LiU/Arbetshistorik/Arbetshistorik.xlsx")
```{r setup, include = FALSE}
require(knitr)
require(kableExtra)
require(readxl)
require(dplyr)
knitr::opts_chunk$set(echo = FALSE)
history <- read_xlsx("F:/OneDrive/OneDrive - Linköpings universitet/Jobb/LiU/Arbetshistorik/Arbetshistorik.xlsx")
current_semester <- "HT"
current_year <- "2020"
current <- history %>%
filter(År == current_year, Termin == current_semester) %>%
select(Kursnamn, Kurskod, "Antal hp") %>%
rename("Course Name" = Kursnamn, "Course Code" = Kurskod, "Credits" = "Antal hp")
kable(current, format = "html", align = "l", escape = FALSE) %>%
kable_styling(font_size = 14,
full_width = FALSE,
position = "left")
past <- history %>%
filter(År != current_year | Termin != current_semester) %>%
select(Kursnamn, Kurskod, "Antal hp") %>%
rename("Course Name" = Kursnamn, "Course Code" = Kurskod, "Credits" = "Antal hp") %>%
distinct() %>%
arrange("Course Code")
past <- history %>%
filter(År != current_year | Termin != current_semester) %>%
select(Kursnamn, Kurskod, "Antal hp") %>%
rename("Course Name" = Kursnamn, "Course Code" = Kurskod, "Credits" = "Antal hp") %>%
distinct() %>%
arrange(Kurskod)
past <- history %>%
filter(År != current_year | Termin != current_semester) %>%
select(Kursnamn, Kurskod, "Antal hp") %>%
rename("Course Name" = Kursnamn, "Course Code" = Kurskod, "Credits" = "Antal hp") %>%
distinct() %>%
arrange(Course Code)
past <- history %>%
filter(År != current_year | Termin != current_semester) %>%
select(Kursnamn, Kurskod, "Antal hp") %>%
rename("Course Name" = Kursnamn, "Course Code" = Kurskod, "Credits" = "Antal hp") %>%
distinct() %>%
arrange(`Course Code`)
kable(past, format = "html", align = "l") %>%
kable_styling(font_size = 14,
full_width = FALSE,
position = "left")
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
source("packages_732g45.r")
source("packages_732g45.r")
blogdown::stop
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
install.packages("captioner")
source("packages_732g45.r")
tables <- captioner(prefix = "Tabell")
figures <- captioner(prefix = "Figur")
source("packages_732g45.r")
tables("bilmarke", "Fördelning av bilmärken i urvalet")
tables <- captioner(prefix = "Tabell", auto_space = FALSE)
source("packages_732g45.r")
tables("bilmarke", "Fördelning av bilmärken i urvalet")
source("packages_732g45.r")
tables("bilmarke", "Fördelning av bilmärken i urvalet")
source("packages_732g45.r")
tables("bilmarke", "Fördelning av bilmärken i urvalet")
knitr::opts_chunk$set(warning=FALSE, message=FALSE, echo = TRUE, eval = TRUE, fig.pos = 'H', fig.height = 2, fig.align = "center", fig.width = 6)
source("packages_732g45.r")
tables("bilmarke", "Fördelning av bilmärken i urvalet", display = FALSE)
xfun::pkg_load2(c("htmltools", "mime"))
exempeltabell <- as.data.frame(table(exempeldata$bil))
colnames(exempeltabell) <- c("Märke", "Frekvens")
kable(exempeltabell, format = "html", caption = tables("bilmarke")) %>%
kable_styling(position = "center", full_width = FALSE)
blogdown:::serve_site()
bookdown::stop_server
bookdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
version
require(installr)
install.R()
# Uninstalling the second to last version of R on the device
uninstall.R()
packages <- c(#Visualization
"GGally",
"ggplot2",
"scales",
"gridExtra",
"RColorBrewer",
"portfolio",
"digest",
"ggmap",
#Document creations
"rmarkdown",
"knitr",
"tinytex",
"xtable",
"kable",
"kableExtra",
#Interactive visualizations
"plotly",
#Setup packages
"installr",
# Distributions
"mvtnorm",
# Survey
"pxweb",
"survey",
# Time series
"TSA",
"MTS",
# Data
"xlsx",
"reshape2",
"dplyr",
"DMwR",
"RPostgreSQL",
"XML",
"bmp",
"R.utils",
# Text
"stringr",
"stringi",
"lubridate",
"tm",
"SnowballC",
"wordcloud",
"MASS",
"dbscan",
"animation",
"DBI",
"diagram",
"neuralnet",
"formatR",
"devtools",
"tidyr",
"bookdown",
# Shiny
"shiny",
"shinythemes",
"shinycssloaders",
"RCurl",
"dichromat",
"PKI",
"packrat",
"rsconnect",
"DT",
# Machine Learning
"keras",
"matchingR",
"rpart",
"caret",
"e1071",
"kknn",
"arules",
"arulesSequences",
"kohonen")
install.packages(packages)
data()
data("AirPassengers")
plot(AirPassengers)
require(ggplot2)
ggplot(AirPassengers)
data.frame(AirPassengers)
require(lubridate)
seq(ym('2012-04-07'),ym('2013-03-22'),by='months')
seq(ymd('2012-04-07'),ymd('2013-03-22'),by='months')
data(AirPassengers)
AirPassengers <- data.frame(AirPassengers) %>%
mutate(time = seq(ymd('1946-01-01'),ymd('1960-12-01'),by='months'))
require(dplyr)
data(AirPassengers)
AirPassengers <- data.frame(AirPassengers) %>%
mutate(time = seq(ymd('1946-01-01'),ymd('1960-12-01'),by='months'))
data(AirPassengers)
AirPassengers <- data.frame(AirPassengers)
View(AirPassengers)
seq(ymd('1946-01-01'),ymd('1960-12-01'),by='months')
data(iris)
force(iris)
View(iris)
require(dplyr)
require(ggplot2)
require(lubridate)
require(tidyr)
require(tibble)
source("F:/GitHubs/visualization_literature/hietala_theme.R")
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
rel_data <- data %>% filter(geoId %in% c("IT", "SE", "ES", "US", "DE", "CS")) %>%
mutate(rel_deaths_per_100k = deaths/popData2018 * 100000,
date = as_date(as.character(dateRep), format = "%d/%m/%y", tz = "Europe/Stockholm")) %>%
mutate(date = replace(date, date == "2020/12/31", "2019/12/31")) %>%
group_by(geoId)
rel_data <- data %>% filter(geoId %in% c("IT", "SE", "ES", "US", "DE", "CS")) %>%
mutate(rel_deaths_per_100k = deaths/popData2019 * 100000,
date = as_date(as.character(dateRep), format = "%d/%m/%y", tz = "Europe/Stockholm")) %>%
mutate(date = replace(date, date == "2020/12/31", "2019/12/31")) %>%
group_by(geoId)
# Using tail because of ordering of dates (new dates first)
mort_data <- rel_data %>%
filter(date >= tail(date[which(deaths >0)], n = 1)) %>%
arrange(date) %>%
mutate(cum_deaths = cumsum(deaths),
days_since_death = as.numeric(date - date[row_number() == 1]))
ggplot(mort_data) + aes(x = date, y = rel_deaths_per_100k, color = countryterritoryCode) + geom_line(size = 1) +
labs(x = "Date", y = "Deaths \n per \n100k") +
scale_color_manual("Country", values = c("ESP" = "gold",
"ITA" = "dark green",
"SWE"= "blue",
"USA" ="red",
"DEU"="black"))
rel_data <- data %>% filter(geoId %in% c("IT", "SE", "US", "DE", "CS")) %>%
mutate(rel_deaths_per_100k = deaths/popData2019 * 100000,
date = as_date(as.character(dateRep), format = "%d/%m/%y", tz = "Europe/Stockholm")) %>%
mutate(date = replace(date, date == "2020/12/31", "2019/12/31")) %>%
group_by(geoId)
# Using tail because of ordering of dates (new dates first)
mort_data <- rel_data %>%
filter(date >= tail(date[which(deaths >0)], n = 1)) %>%
arrange(date) %>%
mutate(cum_deaths = cumsum(deaths),
days_since_death = as.numeric(date - date[row_number() == 1]))
ggplot(mort_data) + aes(x = date, y = rel_deaths_per_100k, color = countryterritoryCode) + geom_line(size = 1) +
labs(x = "Date", y = "Deaths \n per \n100k") +
scale_color_manual("Country", values = c("ESP" = "gold",
"ITA" = "dark green",
"SWE"= "blue",
"USA" ="red",
"DEU"="black"))
ggplot(mort_data) + aes(x = days_since_death, y = rel_deaths_per_100k, color = countryterritoryCode) + geom_line(size = 1)+
labs(x = "Days since first death in country", y = "Deaths \n per \n100k") +
scale_color_manual("Country", values = c("ESP" = "gold",
"ITA" = "dark green",
"SWE"= "blue",
"USA" ="red",
"DEU"="black"))
rel_data <- data %>% filter(geoId %in% c("SE", "US", "DK")) %>%
mutate(rel_deaths_per_100k = deaths/popData2019 * 100000,
date = as_date(as.character(dateRep), format = "%d/%m/%y", tz = "Europe/Stockholm")) %>%
mutate(date = replace(date, date == "2020/12/31", "2019/12/31")) %>%
group_by(geoId)
# Using tail because of ordering of dates (new dates first)
mort_data <- rel_data %>%
filter(date >= tail(date[which(deaths >0)], n = 1)) %>%
arrange(date) %>%
mutate(cum_deaths = cumsum(deaths),
days_since_death = as.numeric(date - date[row_number() == 1]))
ggplot(mort_data) + aes(x = date, y = rel_deaths_per_100k, color = countryterritoryCode) + geom_line(size = 1) +
labs(x = "Date", y = "Deaths \n per \n100k") +
scale_color_manual("Country", values = c("ESP" = "gold",
"ITA" = "dark green",
"SWE"= "blue",
"USA" ="red",
"DAN"="black"))
ggplot(mort_data) + aes(x = date, y = rel_deaths_per_100k, color = countryterritoryCode) + geom_line(size = 1) +
labs(x = "Date", y = "Deaths \n per \n100k") +
scale_color_manual("Country", values = c("ESP" = "gold",
"ITA" = "dark green",
"SWE"= "blue",
"USA" ="red",
"DNK"="black"))
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
write.csv(file = "temp.csv", x = data)
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
rel_data <- data %>% filter(geoId %in% c("SE", "US", "DK")) %>%
mutate(rel_deaths_per_100k = deaths/popData2019 * 100000,
date = as_date(as.character(dateRep), format = "%d/%m/%y", tz = "Europe/Stockholm")) %>%
mutate(date = replace(date, date == "2020/12/31", "2019/12/31")) %>%
group_by(geoId)
# Using tail because of ordering of dates (new dates first)
mort_data <- rel_data %>%
filter(date >= tail(date[which(deaths >0)], n = 1)) %>%
arrange(date) %>%
mutate(cum_deaths = cumsum(deaths),
days_since_death = as.numeric(date - date[row_number() == 1]))
write.csv(file = "temp.csv", x = mort_data)
read.csv(file = "temp.csv")
source("F:/GitHubs/visualization_literature/hietala_theme.R")
source("F:/GitHubs/visualization_literature/hietala_theme.R")
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
rel_data <- data %>% filter(geoId %in% c("SE", "US", "DK")) %>%
mutate(rel_deaths_per_100k = deaths/popData2019 * 100000,
date = as_date(as.character(dateRep), format = "%d/%m/%y", tz = "Europe/Stockholm")) %>%
mutate(date = replace(date, date == "2020/12/31", "2019/12/31")) %>%
group_by(geoId)
# Using tail because of ordering of dates (new dates first)
mort_data <- rel_data %>%
filter(date >= tail(date[which(deaths >0)], n = 1)) %>%
arrange(date) %>%
mutate(cum_deaths = cumsum(deaths),
days_since_death = as.numeric(date - date[row_number() == 1]))
save(file = "corona.RData", version = 2)
save(list = c("data", "mort_data", "rel_data"), file = "corona.RData", version = 2)
help("Sys.setlocale")
Sys.getlocale()
Sys.setlocale(locale = "sv_SE")
rel_data <- data %>% #filter(geoId %in% c("SE", "US", "DK")) %>%
mutate(rel_deaths_per_100k = deaths/popData2019 * 100000,
date = as_date(as.character(dateRep), format = "%d/%m/%y", tz = "Europe/Stockholm")) %>%
mutate(date = replace(date, date == "2020/12/31", "2019/12/31")) %>%
group_by(geoId)
# Using tail because of ordering of dates (new dates first)
mort_data <- rel_data %>%
filter(date >= tail(date[which(deaths >0)], n = 1)) %>%
arrange(date) %>%
mutate(cum_deaths = cumsum(deaths),
days_since_death = as.numeric(date - date[row_number() == 1]))
rel_data <- data %>% #filter(geoId %in% c("SE", "US", "DK")) %>%
mutate(rel_deaths_per_100k = deaths/popData2019 * 100000,
date = as_date(as.character(dateRep), format = "%d/%m/%y", tz = "Europe/Stockholm")) %>%
mutate(date = replace(date, date == "2020/12/31", "2019/12/31")) %>%
group_by(geoId)
rel_data
mort_data <- rel_data %>%
filter(date >= tail(date[which(deaths >0)], n = 1))
View(mort_data)
save(list = c("data", "mort_data", "rel_data"), file = "corona.RData", version = 2)
View(mort_data)
current_data <- rel_data %>% filter(geoID %in% c("SE", "US", "DK")) %>% select(date, geoId, cases) %>% pivot_wider(id_cols = geoId)
current_data <- rel_data %>% filter(geoId %in% c("SE", "US", "DK")) %>% select(date, geoId, cases) %>% pivot_wider(id_cols = geoId)
View(current_data)
current_data <- rel_data %>% filter(geoId %in% c("SE", "US", "DK")) %>% select(date, geoId, cases) %>% pivot_wider(names_from = geoId)
current_data <- rel_data %>% filter(geoId %in% c("SE", "US", "DK")) %>% select(date, geoId, cases) %>% pivot_wider(names_from = geoId, values_from = cases)
